%require "3.2"
%language "C++"

%define api.value.type variant
%define api.token.constructor
%define parse.assert

%lex-param { ParserContext* ctx }
%parse-param { ParserContext* ctx }

%code requires
{
    #pragma once
    #include <iostream>
    #include <string>

    struct ParserContext;
    
    namespace yy
    {
        class parser;
    }
}

%code
{    
    namespace yy
    {
        parser::symbol_type yylex(ParserContext* ctx);
    }

}

%token  
    KVar
    KWhile
    KLoop
    KIf
    KThen
    KElse
    KIs
    KEnd
    KClass
    KMethod
    KExtends
    KThis
    KSuper
    KTrue
    KFalse
    KReturn
    Identifier
    Access
    Assign
    LParen
    RParen
    Colon
    Comma
    LBracket
    RBracket
    LitStr
    LitInt
    LitReal
    Err
%type <std::string> Identifier
%type <std::string> LitStr
%type <std::string> LitInt
%type <std::string> LitReal
%type <std::string> Err

%%

Program:
|Program Lal
;

Lal: KVar {std::cout << "there is some var :-/" << std::endl;}
;

%%
namespace yy
{
    void parser::error(const std::string& msg) //(3+)
    {
        std::cout << msg;
    }
}
