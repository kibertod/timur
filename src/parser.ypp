%require "3.2"
%language "C++"

%define api.value.type variant
%define api.token.constructor
%define parse.assert

%lex-param { ParserContext& ctx }
%parse-param { ParserContext& ctx }

%code requires
{
    #pragma once
    #include <iostream>
    #include <string>
    #include "ast.h"

    struct ParserContext {
        size_t pos;
        std::string src;
        std::vector<ast::Expression> root;
    };
    
    namespace yy
    {
        class parser;
    }
}

%code
{    
    namespace yy
    {
        parser::symbol_type yylex(ParserContext& ctx);
    }
}

%token  
    KVar
    KWhile
    KLoop
    KIf
    KThen
    KElse
    KIs
    KEnd
    KClass
    KMethod
    KExtends
    KThis
    KSuper
    KTrue
    KFalse
    KReturn
    Identifier
    Access
    Assign
    LParen
    RParen
    Colon
    Comma
    LBracket
    RBracket
    LitStr
    LitInt
    LitReal
    Err

%type <std::string> LitStr
%type <std::string> LitInt
%type <std::string> LitReal
%type <ast::Expression::Literal> Literal

%type <std::string> Err

%type <std::string> Identifier
%type <std::vector<ast::Identifier>> Identifiers;

%type <ast::TypeName> TypeName

%type <ast::Expression> Expression
%type <std::vector<ast::Expression>> Expressions

%%

Program: 
    Expressions { ctx.root = $1; }
;

Identifiers:
    Identifier { $$ = std::vector<ast::Identifier> {ast::Identifier{$1}}; }
    | Identifiers Comma Identifier { $1.push_back(ast::Identifier{$3}); $$ = $1; }
;

TypeName:
    Identifier { $$ = ast::TypeName {$1, std::vector<ast::Identifier>()}; }
    | Identifier LBracket Identifiers RBracket { $$ = ast::TypeName {$1, $3}; }
;

Expression:
    Expression Access Identifier {
        $$ = ast::Expression{
            ast::Expression::MemberAccess{ std::make_shared<ast::Expression>($1), $3 }
        };
    }
    | Expression Access Identifier LParen Expressions RParen {
        $$ = ast::Expression{
            ast::Expression::MethodCall{ std::make_shared<ast::Expression>($1), $3, $5 }
        }; 
    }
    | Identifier {
        $$ = ast::Expression{ ast::Identifier{$1} };
    }
    | Literal {
        $$ = ast::Expression{ $1 };
    }
;

Expressions:
    Expression { $$ = std::vector<ast::Expression> {$1}; }
    | Expressions Comma Expression { $1.push_back($3); $$ = $1; }
;

Literal:
    LitStr { $$ = ast::Expression::Literal{ast::Expression::Literal::Type::Str, $1}; }
    | LitInt { $$ = ast::Expression::Literal{ast::Expression::Literal::Type::Int, $1}; }
    | LitReal { $$ = ast::Expression::Literal{ast::Expression::Literal::Type::Real, $1}; }
    | KTrue { $$ = ast::Expression::Literal{ast::Expression::Literal::Type::Bool, "true"}; }
    | KFalse { $$ = ast::Expression::Literal{ast::Expression::Literal::Type::Bool, "false"}; }
;

%%
namespace yy
{
    void parser::error(const std::string& msg) //(3+)
    {
        std::cout << msg;
    }
}
